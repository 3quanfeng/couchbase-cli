#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
membase.py

This program is the top level source file for the Membase Command Line Tools
"""

import getopt
import sys
import listservers
import buckets
import node
from membase_info import usage

def main():
    """Main CLI entry point."""
    (cluster, user, password) = ('', '', '')

    try:
        (opts, _args) = getopt.getopt(sys.argv[2:],
                                     'a:b:c:de:gdho:p:r:su:v', [
                'help',
                'cluster=',
                'debug',
                'password=',
                'user=',
                'output=',
                'stats',
                'server-add=',
                'server-add-username=',
                'server-add-password=',
                'server-remove=',
                'server-remove-username=',
                'server-remove-password=',
                ])
        cmd = sys.argv[1]
    except IndexError:
        usage()
    except getopt.GetoptError, err:
        usage(err)

    # check if usage specified

    for (opt, arg) in opts:
        if opt in ('-c', '--cluster'):
            cluster = arg
        if opt in ('-h', '--help'):
            usage()
        if opt in ('-p', '--password'):
            password = arg
        if opt in ('-u', '--user'):
            user = arg

    if not cluster:
        usage("You must specify at least two things: command, "
              "and cluster (--cluster)")

    try:
        server, port = cluster.split(':')
        port = int(port)
    except ValueError:
        usage()

    # these are the commands which map to the classes
    # the contain the implementation of that particular
    # command

    commands = {
        'server-list'       : listservers.Listservers,
        'bucket-list'       : buckets.Buckets,
        'bucket-details'    : buckets.Buckets,
        'bucket-stats'      : buckets.Buckets,
        'bucket-create'     : buckets.Buckets,
        'bucket-delete'     : buckets.Buckets,
        'bucket-flush'      : buckets.Buckets,
        'server-add'        : node.Node,
        'rebalance'         : node.Node,
        'rebalance-stop'    : node.Node,
        'rebalance-status'  : node.Node,
        'eject-server'      : node.Node,
        'failover'          : node.Node,
        }

    # make sure the command is defined

    if cmd not in commands:
        err_message = "command: '%s' not found" % cmd
        usage(err_message)

    # instantiate

    taskrunner = commands[cmd]()

    # call runCmd method

    taskrunner.runCmd(cmd, server, port, user, password, opts)

if __name__ == '__main__':
    main()
